{"version":3,"sources":["Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","length","substring","HomePresenter","nowPlaying","upComing","popular","err","loading","Helmet","Loader","map","movie","original_title","poster_path","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","TVApi","get","append_to_response","term","query","encodeURIComponent","moviesApi","HomeContainer","state","data","results","this","setState","console","log","React","Component","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","show","original_name","first_air_date","SearchContainer","event","preventDefault","searchByTerm","target","a","TVPresenter","topRated","airingToday","TVContainer","Header","header","List","ul","Item","li","current","SLink","Link","withRouter","pathname","location","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","request","path","exact","component","Home","TV","render","Search","Detail","from","GlobalStyles","createGlobalStyle","reset","App","Router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.736b8ce7.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    :not(:last-child){\r\n        margin-bottom:50px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    font-size:16px;\r\n    font-weight:600;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    margin-top:25px;\r\n    display:grid;\r\n    grid-template-columns:repeat(auto-fill, 125px);\r\n    grid-gap:25px;\r\n`;\r\n\r\nconst Section = ({title, children}) =>(\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n);\r\n\r\nSection.propTypes ={\r\n    title:PropTypes.string.isRequired,\r\n    children:PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    height:100vh;\r\n    width:100vw;\r\n    display:flex;\r\n    justify-content:center;\r\n    font-size:28px;\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport default () => <Container>\r\n        <span role=\"img\" aria-label=\"Lodaing\">\r\n        ⏰\r\n        </span>\r\n    </Container>","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width:100vw;\r\n    display:flex;\r\n    justify-content:center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n    color:${props=>props.color};\r\n`;//styled components안에 javascript요소를 넣을 때는 꼭 ${}로 감싸준다\r\n\r\nconst Message =({text, color}) => \r\n    <Container>\r\n        <Text color ={color}>{text}</Text>\r\n    </Container>\r\n\r\nMessage.propTypes ={\r\n    text:PropTypes.string.isRequired,\r\n    color:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from \"styled-components\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n    font-size:12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n    background-image:url(${props=>props.bgUrl});\r\n    //require(\"assets/noPosterSnall.png\")\r\n    height:180px;\r\n    background-size:cover;\r\n    border-radius:4px;\r\n    background-position:center center;\r\n    transition:opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n    bottom:5px;\r\n    right:5px;\r\n    position:absolute;\r\n    opacity:0;\r\n    transition:opacity 0.1s linear;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n    margin-bottom:5px;\r\n    position:relative;\r\n    &:hover{\r\n        ${Image}{\r\n            opacity:0.3;\r\n        }\r\n\r\n        ${Rating}{\r\n            opacity:1;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Title = styled.span`\r\n    display:block;\r\n    margin-bottom:3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n    font-size:10px;\r\n    color: rgba(255,255,255,0.5);\r\n`;\r\n\r\nconst Poster = ({id, imageUrl, title, rating, year=\"0000\", isMovie = false}) => (\r\n    <Link to={isMovie? `/movie/${id}` : `/tv/${id}`}>\r\n      <Container>\r\n        <ImageContainer>\r\n            <Image bgUrl ={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : 'noPosterSmall.png'}/>\r\n            <Rating>\r\n                <span role = \"img\" aria-label=\"rating\">\r\n                ⭐\r\n                </span>{\" \"}\r\n                {rating}/10\r\n            </Rating>\r\n        </ImageContainer>\r\n        <Title>{title.length >18 ? `${title.substring(0,15)}...` : title}</Title>\r\n        <Year>{year}</Year>\r\n    </Container>  \r\n    </Link>\r\n    \r\n);\r\n\r\nPoster.propTypes ={\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year:PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n}\r\n\r\nexport default Poster;","import React from 'react';\r\nimport PropTypes, { array } from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\"\r\nimport Message from 'Components/Message';\r\nimport Poster from 'Components/Poster';\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\npadding:20px;\r\n`;\r\n\r\nconst HomePresenter = ({nowPlaying, upComing, popular, err, loading}) => (\r\n    <>\r\n    <Helmet>\r\n        <title>Movies | Hongfilx</title>\r\n    </Helmet>\r\n    {loading ? (\r\n    <Loader/>\r\n        ):(\r\n    <Container>\r\n        {nowPlaying && nowPlaying.length>0 && (\r\n        <Section title=\"Now Playing\">\r\n            {nowPlaying.map(movie =>\r\n            // <span key = {movie.id}>{movie.title}</span>\r\n            <Poster \r\n            key={movie.id} \r\n            id={movie.id} \r\n            title = {movie.original_title} \r\n            imageUrl ={movie.poster_path}\r\n            rating = {movie.vote_average}\r\n            isMovie = {true}\r\n            year = {movie.release_date.substring(0,4)}\r\n            />\r\n            )}\r\n        </Section>\r\n        )}\r\n        \r\n        {popular && popular.length>0 && (\r\n        <Section title=\"Popular Movies\">\r\n            {popular.map(movie =>\r\n            // <span key = {movie.id}>{movie.title}</span>\r\n            <Poster \r\n            key={movie.id} \r\n            id={movie.id} \r\n            title = {movie.original_title} \r\n            imageUrl ={movie.poster_path}\r\n            rating = {movie.vote_average}\r\n            isMovie = {true}\r\n            year = {movie.release_date.substring(0,4)}\r\n            />\r\n            )}\r\n        </Section>\r\n        )}\r\n\r\n        {upComing && upComing.length>0 && (\r\n        <Section title=\"UpComing\">\r\n            {upComing.map(movie =>\r\n            // <span key = {movie.id}>{movie.title}</span>\r\n            <Poster\r\n            key={movie.id} \r\n            id={movie.id} \r\n            title = {movie.original_title} \r\n            imageUrl ={movie.poster_path}\r\n            rating = {movie.vote_average}\r\n            isMovie = {true}\r\n            year = {movie.release_date.substring(0,4)}\r\n            />\r\n            )}\r\n        </Section>\r\n        )}\r\n        {err && <Message color=\"#e74c3c\" text={err}/>}\r\n    </Container>\r\n    )}\r\n    </>\r\n);\r\n    \r\n\r\nHomePresenter.propTypes={\r\n    nowPlaying:PropTypes.array, \r\n    upComing:PropTypes.array,\r\n    popular:PropTypes.array, \r\n    err:PropTypes.string, \r\n    loading:PropTypes.bool.isRequired\r\n}\r\n\r\nexport default HomePresenter;","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3/\",\r\n    params:{\r\n        api_key : \"40f91f8c1fcb3743cba488ad4d6ade90\",\r\n        language : \"en-US\"\r\n    }\r\n})\r\n\r\nexport const TVApi = {\r\n    airingToday:() => api.get(\"tv/airing_today\"),\r\n    topRated:() =>api.get(\"tv/top_rated\"),\r\n    popular:() => api.get(\"tv/popular\"),\r\n    showDetail: (id) =>\r\n        api.get(`tv/${id}`,{//``를 사용해 문자열 안에 javascript요소를 넣을 수 있다.\r\n          params:{\r\n               append_to_response:\"videos\"\r\n          }\r\n          \r\n        }),\r\n    search:(term) =>api.get(\"search/tv\", {\r\n        params:{\r\n           query: encodeURIComponent(term),\r\n        }\r\n    })\r\n};\r\n\r\nexport const moviesApi = {\r\n    nowPlaying:() => api.get(\"movie/now_playing\"),\r\n    upComing:() =>api.get(\"movie/upcoming\"),\r\n    popular:() => api.get(\"movie/popular\"),\r\n    movieDetail: (id) => \r\n        api.get(`movie/${id}`,{//``를 사용해 문자열 안에 javascript요소를 넣을 수 있다.\r\n            params:{\r\n                append_to_response:\"videos\"\r\n            }\r\n        }),\r\n    search:(term) =>api.get(\"search/movie\", {\r\n        params:{\r\n            query: encodeURIComponent(term),\r\n\r\n        }\r\n    })\r\n};","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;","import React from 'react';\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport {moviesApi} from \"api\";\r\n\r\nexport default class extends React.Component{\r\n    state = {\r\n        nowPlaying: null,\r\n        upComing: null,\r\n        popular: null,\r\n        err:null,\r\n        loading:true\r\n    };\r\n\r\n    async componentDidMount(){\r\n        try{\r\n            const {data:{results:nowPlaying}} = await moviesApi.nowPlaying();\r\n            const {data:{results:upComing}} = await moviesApi.upComing();\r\n            const {data:{results:popular}} = await moviesApi.popular();\r\n\r\n            this.setState({\r\n                nowPlaying,//자바스크립트는 nowPlaying 을 nowPlaying(클래스의 state):(try 내 변수)nowPlying으로 인식\r\n                upComing,\r\n                popular\r\n            })\r\n        }catch{\r\n            this.setState({\r\n                err:\"Can't get Movies information\"\r\n            })\r\n        }finally{\r\n            this.setState({\r\n                loading:false\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {nowPlaying, upComing, popular, err, loading} = this.state;//구조분해할당\r\n        console.log(this.state);\r\n        return (<HomePresenter \r\n        nowPlaying = {nowPlaying} \r\n        upComing={upComing} \r\n        popular={popular}\r\n        err = {err}\r\n        loading={loading}\r\n        />)\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes, { array } from \"prop-types\";\r\nimport styled from 'styled-components';\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from 'Components/Message';\r\nimport Poster from 'Components/Poster';\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    padding:20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n    margin-bottom:50px;\r\n    width:100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    all:unset;\r\n    font-size:28px;\r\n    width:100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n    movieResults, \r\n    tvResults, \r\n    err, \r\n    loading,\r\n    searchTerm, \r\n    handleSubmit,\r\n    updateTerm\r\n}) =>( \r\n<Container>\r\n    <Helmet><title>Search | Hongfilx</title></Helmet>\r\n    <Form onSubmit ={handleSubmit}>\r\n        <Input placeholder=\"Search Movies or TV shows...\" \r\n        value={searchTerm} \r\n        onChange={updateTerm}\r\n        />\r\n    </Form>\r\n    {loading ? (<Loader/> \r\n    ):(\r\n      <>\r\n        {movieResults && movieResults.length>0 && (\r\n        <Section title=\"Movie Results\">\r\n            {movieResults.map(movie => (\r\n                // <span key ={movie.id}>{movie.title}</span>\r\n                <Poster\r\n            key={movie.id} \r\n            id={movie.id} \r\n            title = {movie.original_title} \r\n            imageUrl ={movie.poster_path}\r\n            rating = {movie.vote_average}\r\n            isMovie = {true}\r\n            year = {movie.release_date ? movie.release_date.substring(0,4) : \"\"}/>\r\n            ))}\r\n        </Section>\r\n        )}\r\n\r\n        {tvResults && tvResults.length>0 && (\r\n        <Section title=\"TV Show Results\">\r\n            {tvResults.map(show => (\r\n                // <span key ={show.id}>{show.name}</span>\r\n                <Poster\r\n            key={show.id} \r\n            id={show.id} \r\n            title = {show.original_name} \r\n            imageUrl ={show.poster_path}\r\n            rating = {show.vote_average}\r\n            year = {show.first_air_date ? show.first_air_date.substring(0,4) : \"\"}/>\r\n            ))}\r\n        </Section>\r\n        )}\r\n        {err && <Message color=\"#e74c3c\" text={err}/>}\r\n        {tvResults && movieResults && tvResults.length === 0 && movieResults.length === 0 &&(\r\n        <Message text=\"Nothing Found\" color=\"#95a5a6\"/>\r\n        )}  \r\n      </>\r\n    )}\r\n</Container>\r\n);\r\n\r\nSearchPresenter.propTypes={\r\n    movieResults:PropTypes.array, \r\n    tvResults:PropTypes.array, \r\n    err:PropTypes.string, \r\n    loading:PropTypes.bool.isRequired,\r\n    searchTerm:PropTypes.string,\r\n    handleSubmit:PropTypes.func.isRequired,\r\n    updateTerm:PropTypes.func.isRequired\r\n}\r\n\r\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;","import { moviesApi, TVApi } from 'api';\r\nimport React from 'react';\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nexport default class extends React.Component{\r\n    state = {\r\n        movieResults: null,\r\n        tvResults: null,\r\n        searchTerm:\"\",\r\n        err:null,\r\n        loading:false\r\n    }\r\n\r\n    handleSubmit = (event) =>{\r\n        event.preventDefault();\r\n        const {searchTerm} = this.state;  \r\n        if(searchTerm !== \"\"){\r\n            this.searchByTerm();\r\n        }\r\n    }\r\n\r\n    updateTerm =(event) =>{\r\n        const {target:{value}} = event;\r\n        console.log(value);\r\n        this.setState({\r\n            searchTerm:value\r\n        });\r\n    }\r\n\r\n    searchByTerm=async() =>{\r\n        const {searchTerm} = this.state;\r\n        this.setState({loading:true});\r\n        try{\r\n            const {data:{results:movieResults}} = await moviesApi.search(searchTerm);\r\n            const {data:{results:tvResults}} = await TVApi.search(searchTerm);\r\n            this.setState({\r\n                movieResults,\r\n                tvResults\r\n            });\r\n        }catch{\r\n            this.setState({err:\"can't find result\"});\r\n        }finally{\r\n            this.setState({loading:false})\r\n        }\r\n    }\r\n    render(){\r\n        const {movieResults, tvResults, searchTerm, err, loading} = this.state;\r\n        console.log(this.state);\r\n        return (<SearchPresenter \r\n        movieResults = {movieResults} \r\n        tvResults={tvResults} \r\n        searchTerm={searchTerm}\r\n        err = {err}\r\n        loading={loading}\r\n        handleSubmit = {this.handleSubmit}\r\n        updateTerm = {this.updateTerm}\r\n        />)\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes, { array } from \"prop-types\";\r\nimport styled from 'styled-components';\r\nimport Section from \"Components/Section\";\r\nimport Loader from 'Components/Loader';\r\nimport Message from \"Components/Message\";\r\nimport Poster from 'Components/Poster';\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\npadding:20px;\r\n`;\r\n\r\nconst TVPresenter = ({topRated, airingToday, popular, err, loading}) => (\r\n    <>\r\n    <Helmet>\r\n        <title>TV | Hongfilx</title>\r\n    </Helmet>\r\n    {loading ? (\r\n    <Loader/>\r\n        ):(\r\n    <Container>\r\n        {topRated && topRated.length>0 && (\r\n        <Section title=\"Top Rated\">\r\n            {topRated.map(show =>\r\n            // <span key = {show.id}>{show.name}</span>\r\n            <Poster\r\n            key={show.id} \r\n            id={show.id} \r\n            title = {show.original_name} \r\n            imageUrl ={show.poster_path}\r\n            rating = {show.vote_average}\r\n            year = {show.first_air_date.substring(0,4)}\r\n            />\r\n            )}\r\n        </Section>\r\n        )}\r\n        \r\n        {popular && popular.length>0 && (\r\n        <Section title=\"Popular Show\">\r\n            {popular.map(show =>\r\n            // <span key = {show.id}>{show.name}</span>\r\n            <Poster\r\n            key={show.id} \r\n            id={show.id} \r\n            title = {show.original_name} \r\n            imageUrl ={show.poster_path}\r\n            rating = {show.vote_average}\r\n            year = {show.first_air_date.substring(0,4)}\r\n            />\r\n            )}\r\n        </Section>\r\n        )}\r\n\r\n        {airingToday && airingToday.length>0 && (\r\n        <Section title=\"Airing Today\">\r\n            {airingToday.map(show =>\r\n            // <span key = {show.id}>{show.name}</span>\r\n            <Poster\r\n            key={show.id} \r\n            id={show.id} \r\n            title = {show.original_name} \r\n            imageUrl ={show.poster_path}\r\n            rating = {show.vote_average}\r\n            year = {show.first_air_date.substring(0,4)}\r\n            />\r\n            )}\r\n        </Section>\r\n        )}\r\n        {err && <Message color=\"#e74c3c\" text={err}/>}\r\n    </Container>\r\n    )}\r\n    </>\r\n    );\r\n\r\nTVPresenter.propTypes={\r\n    topRated:PropTypes.array, \r\n    popular:PropTypes.array,\r\n    airingToday:PropTypes.array, \r\n    err:PropTypes.string, \r\n    loading:PropTypes.bool.isRequired\r\n}\r\n\r\nexport default TVPresenter;","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import {TVApi} from 'api';\r\nimport React from 'react';\r\nimport TVPresenter from \"./TVPresenter\";\r\n\r\nexport default class extends React.Component{\r\n    state = {\r\n        topRated: null,\r\n        popular: null,\r\n        airingToday: null,\r\n        err:null,\r\n        loading:true\r\n    }\r\n    async componentDidMount(){\r\n        try{\r\n            const {data:{results:topRated}} = await TVApi.topRated();\r\n            const {data:{results:popular}} = await TVApi.popular();\r\n            const {data:{results:airingToday}} = await TVApi.airingToday();\r\n            this.setState({\r\n                topRated,\r\n                popular,\r\n                airingToday\r\n            });\r\n        }catch{\r\n            this.setState({\r\n                err:\"Can't get TV information\"\r\n            })\r\n        }finally{\r\n            this.setState({loading:false})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {topRated, popular, airingToday, err, loading} = this.state;\r\n        console.log(this.state);\r\n        return (<TVPresenter \r\n        topRated = {topRated} \r\n        airingToday={airingToday} \r\n        popular={popular}\r\n        err = {err}\r\n        loading={loading}\r\n        />)\r\n    }\r\n}","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport {Link, withRouter} from 'react-router-dom'//withRouter는 다른 컴포넌트를 감싸는 컴포넌트\r\n                                                //  - css가 props에 접근할 수 있도록 해준다.\r\n// import styles from \"./Header.module.css\"\r\n\r\nconst Header = styled.header`\r\ncolor:white;\r\nposition:fixed;\r\ntop:0;\r\nleft:0;\r\nwidth:100%;\r\nheight:50px;\r\ndisplay:flex;\r\nalign-items:center;\r\nbackground-color: rgba(20,20,20,0.8);\r\nbox-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\nz-index:10;\r\n`;\r\n\r\nconst List = styled.ul`\r\ndisplay:flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\nwidth:80px;\r\nheight:50px;\r\ntext-align:center;\r\nborder-bottom: 5px solid ${props => props.current ? \"#3498db\":\"transparent\"};\r\ntransition : border-bottom .5s ease;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\nheight:50px;\r\ndisplay:flex;\r\nalign-items:center;\r\njustify-content:center;\r\n`;\r\n//Link는 Router태그 안에서만 사용 가능하다.\r\n\r\n//js내에서 css 설정방법\r\n\r\n//module.css로 설정할거면 <ul className = {styles.navList}> 로 할것\r\nexport default withRouter(({location:{pathname}}) => (\r\n    <Header>\r\n        {console.log(pathname)}\r\n        <List>  \r\n            <Item current={pathname === \"/\"}>\r\n                <SLink to=\"/\">Movies</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/tv\"}>\r\n                <SLink to=\"/tv\">TV</SLink>\r\n            </Item>\r\n            <Item current={pathname === \"/search\"}>\r\n                <SLink to=\"/search\">Search</SLink>\r\n            </Item>\r\n        </List>\r\n    </Header>\r\n));\r\n//링크 클릭 시 주소와 pathname 대조 후 current값을 설정 - css에서 current값에 따라 border-bottom 변환\r\n\r\n//위의 방법 대신 const Header = () => () 로 선언하고 export default withRouter(Header) 로 표현할 수도 있다.","import React from 'react';\r\nimport PropTypes, { array } from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Loader from 'Components/Loader';\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    height: calc(100vh - 50px);\r\n    width:100%;\r\n    position:relative;\r\n    padding:50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n    position:absolute;\r\n    top:0;\r\n    left:0;\r\n    width:100%;\r\n    height:100%;\r\n    background-image:url(${props=>props.bgImage});\r\n    background-position:center center;\r\n    background-size: cover;\r\n    filter:blur(3px);\r\n    opacity:0.5;\r\n    z-index:0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    display:flex;\r\n    width:100%;\r\n    position:relative;\r\n    z-index:1;\r\n    height:100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n    width:30%;\r\n    background-image:url(${props=>props.bgImage});\r\n    background-position:center center;\r\n    background-size: cover;\r\n    height:100%;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n    width:70%;\r\n    margin-left:10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n    font-size:32px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n    margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span`\r\n\r\n`;\r\n\r\nconst Divider = styled.span`\r\n    margin:0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n    font-size:12px;\r\n    opacity:0.7;\r\n    line-height:1.5;\r\n    width:50%;\r\n`;\r\n\r\nconst DetailPresenter = ({result, err, loading}) =>(\r\n    loading ? (\r\n    <>\r\n    <Helmet><title>Loading...</title></Helmet>\r\n    <Loader/>\r\n    </>\r\n        ):(\r\n    <Container>\r\n    <Helmet><title>{result.original_title ? result.original_title : result.original_name}</title></Helmet>\r\n    <Backdrop \r\n    bgImage= {result.backdrop_path ? \r\n        `https://image.tmdb.org/t/p/original${result.backdrop_path}` : 'noPosterSmall.png'}\r\n    />\r\n    <Content>\r\n        <Cover\r\n        bgImage = {result.poster_path ? \r\n        `https://image.tmdb.org/t/p/original${result.poster_path}` : 'noPosterSmall.png'}\r\n        />\r\n    <Data>\r\n        <Title>{result.original_title ? result.original_title : result.original_name}</Title>\r\n        <ItemContainer>\r\n            <Item>{result.release_date ? result.release_date.substring(0,4) : result.first_air_date.substring(0,4)}</Item>\r\n            <Divider>·</Divider>\r\n            <Item>{result.runtime ? result.runtime : result.episode_run_time}min</Item>\r\n            <Divider>·</Divider>\r\n            <Item>\r\n                {result.genres && result.genres.map((genre, index) => index === result.genres.length-1 ? genre.name: `${genre.name} / `)}\r\n            </Item>\r\n        </ItemContainer>\r\n        <Overview>{result.overview}</Overview>\r\n    </Data>\r\n    </Content>\r\n    </Container>)\r\n    );\r\n/*result.genres는 배열이므로 map시에 inde값을 가질 수 있다.*/\r\n\r\nDetailPresenter.propTypes={\r\n    popular:PropTypes.object, \r\n    err:PropTypes.string, \r\n    loading:PropTypes.bool.isRequired\r\n}\r\n\r\nexport default DetailPresenter;","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;","import { moviesApi, TVApi } from 'api';\r\nimport React from 'react';\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nexport default class extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        const{location:{pathname}} = props;\r\n        this.state = {\r\n        result:null,\r\n        err:null,\r\n        loading:true,\r\n        isMovie:pathname.includes(\"/movie/\")\r\n    }\r\n    }\r\n    \r\n\r\n    async componentDidMount(){\r\n        const {match:{\r\n            params:{id}\r\n            },\r\n            history:{push},\r\n        } = this.props;\r\n        const {isMovie} = this.state;\r\n        const parsedId = parseInt(id);\r\n        if(isNaN(parsedId)){\r\n            return push(\"/\");\r\n        }\r\n        let result = null;\r\n        try{\r\n        if(isMovie){\r\n            ({data:result} = await moviesApi.movieDetail(parsedId));\r\n        }else{\r\n            const request = await TVApi.showDetail(parsedId);//({data:result})를 쓰는 방법과 request를 다 쓸수있다.\r\n            result = request.data;\r\n        }\r\n        }catch{\r\n        this.setState({err:\"can't find anything\"})\r\n        }finally{\r\n        this.setState({loading:false, result});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {result, err, loading} = this.state;\r\n        console.log(result);\r\n        return (<DetailPresenter \r\n        result={result}\r\n        err = {err}\r\n        loading={loading}\r\n        />)\r\n    }\r\n}","import React from \"react\";\r\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";//HashRouter로도 사용가능 / exact는 주소가 path와 완전히 일치할 경우로 한정\r\nimport Home from \"Routes/Home\";\r\nimport Search from \"Routes/Search\";\r\nimport TV from \"Routes/TV\";\r\nimport Header from \"Components/Header\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\n//Switch는 한번에 하나의 Route만 render할수 있게 한다.(그냥 Route들을 묶어준다는 소리 아닐까)\r\nexport default () => (\r\n    <Router>\r\n        <>\r\n        <Header/>\r\n        <Switch>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/tv\" exact component={TV} />\r\n            <Route path=\"/tv/popular\" render={()=> <h1>Popular</h1>}/>\r\n            <Route path=\"/search\" component={Search} />\r\n            <Route path=\"/movie/:id\" component={Detail}/>\r\n            <Route path=\"/tv/:id\" component={Detail}/>\r\n            <Redirect from=\"*\" to=\"/\" />\r\n        </Switch>\r\n        </>\r\n    </Router>\r\n)","import {createGlobalStyle} from \"styled-components\"\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-size:14px;\r\n        background-color:rgba(20,20,20,1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyles;","import React, { Component } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\nclass App extends Component{\n  render(){\n    return(\n    <>\n    <Router />\n    <GlobalStyles/>\n    </>//render는 하나의 컴포넌트에만 가능하기 때문에 빈 컴포넌트위 형태로 보여주고자 하는 모든 것들을 묶어준다.\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\";\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}